name: CI Testing

on:
  push:
    branches:
      - '**'  # Run on all branches
  workflow_dispatch:
    # Allows manual triggering of the workflow

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Install Docker Compose
      run: |
        sudo apt-get update
        sudo apt-get install -y docker-compose
        docker-compose --version
    
    - name: Create .env file for from secrets
      run: |
        echo "Creating local .env file..."
        cat > temp.env << EOF
        FLASK_APP="${{ secrets.FLASK_APP || 'app.py' }}"
        FLASK_DEBUG="${{ secrets.FLASK_DEBUG || '0' }}"
        SECRET_KEY="${{ secrets.SECRET_KEY }}"
        GITHUB_OAUTH_CLIENT_ID="${{ secrets.GH_OAUTH_CLIENT_ID }}"
        GITHUB_OAUTH_CLIENT_SECRET="${{ secrets.GH_OAUTH_CLIENT_SECRET }}"
        OAUTHLIB_INSECURE_TRANSPORT="${{ secrets.OAUTHLIB_INSECURE_TRANSPORT || '0' }}"
        POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
        POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
        POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
        POSTGRES_PORT="${{ secrets.POSTGRES_PORT || '5432' }}"
        MAPBOX_ACCESS_TOKEN="${{ secrets.MAPBOX_ACCESS_TOKEN }}"
        TRIPADVISOR_API_KEY="${{ secrets.TRIPADVISOR_API_KEY }}"
        EOF
        echo "Local .env file created successfully!"
    
    - name: Start services with docker-compose
      run: |
        docker-compose --profile debug up -d
    
    - name: Wait for services to be ready
      run: |
        # Wait for Flask app to become available
        echo "Waiting for Flask app to start..."
        timeout=60
        counter=0
        while ! curl -s http://localhost:80 > /dev/null; do
          if [ $counter -eq $timeout ]; then
            echo "Timed out waiting for Flask app"
            docker-compose logs
            exit 1
          fi
          echo "Still waiting for Flask app to be available... ($counter/$timeout)"
          sleep 2
          counter=$((counter + 2))
        done
        echo "Flask app is available!"
    
    - name: Test connection to Flask
      run: |
        # Hit the login page (public) instead of protected '/' which always 302s
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80/login)
        if [ "$response" -ne 200 ]; then
          echo "Failed to connect to Flask login page, got HTTP status $response"
          docker-compose logs
          exit 1
        fi
        echo "Successfully connected to Flask login page!"
    
    - name: Clean up
      run: |
        docker-compose --profile debug down
      if: always() 