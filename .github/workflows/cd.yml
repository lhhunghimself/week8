name: CD Deployment

on:
  workflow_dispatch:
    inputs:
      ec2_instance_ip:
        description: 'EC2 Instance IP Address (optional)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        ssh-keyscan -H ${{ secrets.EC2_HOST || inputs.ec2_instance_ip }} >> ~/.ssh/known_hosts
      
    - name: Deploy to EC2
      run: |
        # Use the IP from secrets or from workflow input
        EC2_HOST="${{ secrets.EC2_HOST || inputs.ec2_instance_ip }}"
        
        # SSH into the EC2 instance and run deployment steps
        ssh -i ~/.ssh/ec2.pem ${{ secrets.EC2_USER }}@${EC2_HOST} << 'EOF'
          # Set repository directory
          REPO_DIR="${{ secrets.REPO_DIR || 'app' }}"
          
          # Check if repository directory exists
          if [ ! -d "$REPO_DIR" ]; then
            echo "Repository directory doesn't exist. Cloning..."
            git clone ${{ github.repository }} $REPO_DIR
            cd $REPO_DIR
          else
            echo "Repository directory exists. Navigating to it..."
            cd $REPO_DIR
            
            # Check if docker-compose is running and stop it
            if docker-compose ps 2>/dev/null | grep -q Up; then
              echo "Stopping existing docker-compose setup..."
              docker-compose --profile production down
            fi
            
            # Pull latest changes
            echo "Pulling latest changes..."
            git pull
          fi
          
          # Create .env file from GitHub secrets
          echo "Creating .env file..."
          cat > .env << ENVEOF
          FLASK_APP="${{ secrets.FLASK_APP || 'app.py' }}"
          FLASK_DEBUG="${{ secrets.FLASK_DEBUG || '0' }}"
          SECRET_KEY="${{ secrets.SECRET_KEY }}"
          GITHUB_OAUTH_CLIENT_ID="${{ secrets.GITHUB_OAUTH_CLIENT_ID }}"
          GITHUB_OAUTH_CLIENT_SECRET="${{ secrets.GITHUB_OAUTH_CLIENT_SECRET }}"
          OAUTHLIB_INSECURE_TRANSPORT="${{ secrets.OAUTHLIB_INSECURE_TRANSPORT || '0' }}"
          POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
          POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
          POSTGRES_PORT="${{ secrets.POSTGRES_PORT || '5432' }}"
          MAPBOX_ACCESS_TOKEN="${{ secrets.MAPBOX_ACCESS_TOKEN }}"
          TRIPADVISOR_API_KEY="${{ secrets.TRIPADVISOR_API_KEY }}"
          ENVEOF
          
          # Start docker-compose in production mode
          echo "Starting docker-compose in production mode..."
          docker-compose --profile production up -d --build
          
          echo "Deployment completed!"
        EOF 