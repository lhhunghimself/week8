name: CD

on:
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
      # 1. Install your private key into ~/.ssh/id_rsa
      - name: Install SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # 2. SSH into EC2 and run the deployment script
      - name: Deploy to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          REPO_DIR: ${{ secrets.REPO_DIR }}
        run: |
          # Create a temporary .env file locally
          cat > temp_env_file << EOF
          FLASK_APP="app.py"
          FLASK_DEBUG="0"
          SECRET_KEY="${{ secrets.SECRET_KEY }}"
          GITHUB_OAUTH_CLIENT_ID="${{ secrets.GITHUB_OAUTH_CLIENT_ID }}"
          GITHUB_OAUTH_CLIENT_SECRET="${{ secrets.GITHUB_OAUTH_CLIENT_SECRET }}"
          OAUTHLIB_INSECURE_TRANSPORT="1"
          POSTGRES_USER="${{ secrets.POSTGRES_USER }}"
          POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
          POSTGRES_DB="${{ secrets.POSTGRES_DB }}"
          POSTGRES_PORT="${{ secrets.POSTGRES_PORT }}"
          MAPBOX_ACCESS_TOKEN="${{ secrets.MAPBOX_ACCESS_TOKEN }}"
          TRIPADVISOR_API_KEY="${{ secrets.TRIPADVISOR_API_KEY }}"
          EOF
          
          # Copy the .env file to the server
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa temp_env_file $EC2_USER@$EC2_HOST:/tmp/env_file
          
          # Run the deployment commands
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST "
            set -e
            
            # Use directly passed variables
            REPO_DIR='$REPO_DIR'
            echo \"REPO_DIR: \$REPO_DIR\"
            
            # Clone if missing, otherwise update
            if [ ! -d \"\$REPO_DIR\" ]; then
              git clone https://github.com/${{ github.repository }}.git \"\$REPO_DIR\"
            fi
            cd \"\$REPO_DIR\"

            # Stop any running services
            if [ -f docker-compose.yml ]; then
              docker-compose down
            fi

            # Pull latest and reset to main
            git fetch --all
            git reset --hard origin/main

            # Copy the env file from /tmp
            cp /tmp/env_file .env
            rm /tmp/env_file

            # Build & launch in production profile
            docker-compose up -d --build --remove-orphans --profile production
          "
          
          # Clean up local temp file
          rm temp_env_file 