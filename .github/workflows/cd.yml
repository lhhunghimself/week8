name: CD Deployment

on:
  workflow_dispatch:
    inputs:
      ec2_instance_ip:
        description: 'EC2 Instance IP Address (optional)'
        required: false
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/ec2.pem
        chmod 600 ~/.ssh/ec2.pem
        echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n" > ~/.ssh/config
        chmod 600 ~/.ssh/config
      
    - name: Setup repository on EC2
      run: |
        EC2_HOST="${{ secrets.EC2_HOST || inputs.ec2_instance_ip }}"
        
        ssh -i ~/.ssh/ec2.pem ${{ secrets.EC2_USER }}@${EC2_HOST} << 'EOF'
          REPO_DIR="${{ secrets.REPO_DIR || 'app' }}"
          
          if [ ! -d "$REPO_DIR" ]; then
            echo "Repository directory doesn't exist. Cloning..."
            git clone https://github.com/${{ github.repository }}.git $REPO_DIR
          else
            echo "Repository directory exists. Pulling latest changes..."
            cd $REPO_DIR
            git pull
          fi
          
          echo "Repository setup completed!"
        EOF
      
    - name: Create local .env file
      run: |
        echo "Creating local .env file..."
        echo "FLASK_APP="${{ secrets.FLASK_APP || 'app.py' }}" > /tmp/temp.env 
        echo "FLASK_DEBUG="${{ secrets.FLASK_DEBUG || '0' }}" >> /tmp/temp.env 
        echo "SECRET_KEY="${{ secrets.SECRET_KEY }}" >> /tmp/temp.env 
        echo "GITHUB_OAUTH_CLIENT_ID="${{ secrets.GITHUB_OAUTH_CLIENT_ID }}" >> /tmp/temp.env 
        echo "GITHUB_OAUTH_CLIENT_SECRET="${{ secrets.GITHUB_OAUTH_CLIENT_SECRET }}" >> temp.env 
        echo "OAUTHLIB_INSECURE_TRANSPORT="${{ secrets.OAUTHLIB_INSECURE_TRANSPORT || '0' }}" >> temp.env 
        echo "POSTGRES_USER="${{ secrets.POSTGRES_USER }}" >> temp.env 
        echo "POSTGRES_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}" >> temp.env 
        echo "POSTGRES_DB="${{ secrets.POSTGRES_DB }}" >> temp.env 
        echo "POSTGRES_PORT="${{ secrets.POSTGRES_PORT || '5432' }}" >> temp.env 
        echo "MAPBOX_ACCESS_TOKEN="${{ secrets.MAPBOX_ACCESS_TOKEN }}" >> temp.env 
        echo "TRIPADVISOR_API_KEY="${{ secrets.TRIPADVISOR_API_KEY }}" >> temp.env 
        echo "Local .env file created successfully!"
        
    - name: Transfer .env file to EC2
      run: |
        EC2_HOST="${{ secrets.EC2_HOST || inputs.ec2_instance_ip }}"
        REPO_DIR="${{ secrets.REPO_DIR || 'app' }}"
        # Copy the .env file to the remote server

        #test by touching a test file and transferring it
        touch /tmp/test.txt
        scp -i ~/.ssh/ec2.pem /tmp/test.txt ubuntu@ec2-18-224-110-231.us-east-2.compute.amazonaws.com:/home/ubuntu/test.txt
        echo "test.txt transferred successfully!"
        scp -i ~/.ssh/ec2.pem /tmp/temp.env ${{ secrets.EC2_USER }}@${EC2_HOST}:${REPO_DIR}/.env
        echo ".env file transferred successfully!"
      
    - name: Deploy with Docker Compose
      run: |
        EC2_HOST="${{ secrets.EC2_HOST || inputs.ec2_instance_ip }}"
        
        ssh -i ~/.ssh/ec2.pem ${{ secrets.EC2_USER }}@${EC2_HOST} << 'EOF'
          REPO_DIR="${{ secrets.REPO_DIR || 'app' }}"
          cd $REPO_DIR
          
          # Check if docker-compose is running and stop it
          if docker-compose ps 2>/dev/null | grep -q Up; then
            echo "Stopping existing docker-compose setup..."
            docker-compose --profile production down
          fi
          
          # Start docker-compose in production mode
          echo "Starting docker-compose in production mode..."
          docker-compose --profile production up -d --build
          
          echo "Deployment completed!"
        EOF