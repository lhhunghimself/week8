version: '3.8'

services:
  db:
    image: postgres:16-alpine
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    ports:
      - "5432:5432" # Expose for local inspection if needed, not required for inter-container communication
    networks:
      - app-network
    profiles:
      - debug
      - production
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: flask_app_web
    command: gunicorn --workers 3 --bind 0.0.0.0:5000 app:app
    volumes:
      - .:/app # Mount current directory to /app for development (optional for production)
    ports:
      - "5000" # Expose port for Nginx, not directly to host
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=db
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - production

  web_debug:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: flask_app_web
    command: python3 app.py
    volumes:
      - .:/debug # Mount current directory to /app for development (optional for production)
    ports:
      - "80:5000" # Expose port for Nginx, not directly to host
    depends_on:
      - db
    env_file:
      - .env
    working_dir: /debug
    environment:
      - POSTGRES_HOST=db
      - FLASK_DEBUG=1
      - FLASK_APP=app.py
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - debug


  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    container_name: nginx_proxy
    ports:
      - "80:80"
    depends_on:
      - web
    networks:
      - app-network
    profiles:
      - production
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge 